
namespace app.auth {
  'use strict';
  
  angular
    .module('app.auth')
    .factory('AuthenticationManagerFactory', AuthenticationManagerFactory);
    
    export interface IManageAuthentication {}
    
    export interface IAmAUser {
        id: number;
        claims: number[]
    }
    
    export interface IAuthenticate {
      (params:any): IAmAUser;
    }
    
    export function AuthenticationManagerFactory(localStorageService) {
        this.authenticateLogic = null;
        this.user = null;
        this.isAuthenticated = false;

        return factory; 
        function factory(AuthenticateLogic) {
            console.log("checkLogic");
            if(!this.authenticateLogic && !AuthenticateLogic) {
                throw new Error("AuthenticateLogic has not been set. If you are seeing this error, the code in app.config.auth.us is not being run.")
            }
            console.log("checkUser");
            if (!this.user && localStorageService.keys().indexOf('user') > -1) {
                this.user = localStorageService.get('user');
            }
            
            this.authenticateLogic = AuthenticateLogic;
            
            console.log("return service");
            return service(this.authenticateLogic);
        }

        function service(authenticateLogic) {    
            console.log("service called");        
            var serviceObject = {
                user: this.user,
                authenticate: authenticate,
                signOut: signOut,
                isAuthenticated: this.isAuthenticated
            };            
            return serviceObject;
            
            function authenticate(params) {
                this.user = authenticateLogic(params);
                if (this.user) {
                    this.isAuthenticated = true;
                }
                return this.user;
            }

            function signOut() {
                this.user = null;
                this.isAuthenticated = false;
                localStorageService.remove('user');

                return true;
            }
        }
    }
}

// Code goes here

function injectedFactory(param) {
  this.privateVar=param;
  this.globalVar = null;
  
  return factory;
  
  function factory(param2) {
    return service(param2);
  }
  
  function service(param2) {
    console.log(privateVar);
    var serviceObject = {
      globalVar: this.globalVar,
      service: param2,
      setGlobal: setGlobal
    };
    
    return serviceObject;
    
    function setGlobal(param3) {
      this.globalVar = param3;
    }
  }
}

var factory =injectedFactory('factory');

var service = factory('service');
console.log(service.globalVar);
console.log(service.service);


var service2 = factory('service2');
console.log(service2.globalVar);
console.log(service2.service);

service2.setGlobal('setGlobal');
console.log(service2.globalVar);

